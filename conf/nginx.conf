events {
  worker_connections 1024;
}
#error_log /dev/stdout error;
#daemon off;
http {
  lua_package_path '/home/tim/git/hackyauth/lib/lualib/?.lua;/home/tim/git/hackyauth/src/?.lua;;';
  server {
    lua_check_client_abort on;
    listen 8080;
    location / {
      default_type text/plain;
      content_by_lua_block {

        local mysql = require "resty.mysql"
        local db, err = mysql:new()
        if not db then
          ngx.say("couldnt init mysql")
        end

        local adminlanding = require "admin.landing"
        local admincss = require "admin.css"
        local adminsignup = require "admin.signup"
        --local adminlogin = require "admin.login"
        local admincreatekey = require "admin.create_key"

        local login = require "login"
        local register = require "register"
        local confirm = require "confirm"
        local validate = require "validate"

        local forgot = require "forgot"
        local reset = require "reset"

        local route = require "route"

        route(ngx.var.uri, ngx.req.get_method(), {
          '/', 'GET', adminlanding.go,
          '/smallauth.css', 'GET', admincss.go,
          '/login', 'POST', login.go,
          '/register', 'POST', register.go,
          '/confirm', 'POST', confirm.go,
          '/validate', 'GET', validate.go,
          '/forgot', 'POST', forgot.go,
          '/reset', 'POST', reset.go,
          '/signup', 'POST', adminsignup.go,
          '/admin/apikey', 'POST', admincreatekey.go,
        }, db)
      }
    }
  }
}
